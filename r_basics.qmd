# Rの基本操作

それでは，Rの操作を学んでいきましょう。
ここからはRのコードを示すので，その内容をColabに入力
（あるいはコピペ）してみてください。
たとえば，`3 + 4`というコードを入力してほしい場合，
本書では次のように書きます。

```{r}
3 + 4
```

薄い灰色の部分が入力してほしいコード（この場合は`3 + 4`）です。
その下の桃色の部分は，コードの実行結果（この場合は7）になります。
\[1\]という表示は気にしなくて構いません。

なお，コードを描いているとエラーが表示されることがあります。
エラーがでた場合は，[エラーが出た場合](r_colab.qmd#エラーが出た場合)
の内容を思い出し，落ち着いて対処してください。

## 四則演算
最初に，いくつか四則演算を行ってみましょう。
いくつか例を示すので，Colabで試してみてください。

```{r}
3 + 4 # 足し算
6 - 8 # 引き算
3 * 2 # 掛け算
5 / 4 # 割り算
5^2 # 2乗
```

ちなみに\#から始まる部分はコメントで，Rに入力しても無視されます。
これを利用して，Rのコード内にメモを書くことができます。

```{r}
# ここはコメントです。# から先のコメントは実行されません。
sqrt(4) # メモの例。sqrt()は平方根を計算します。
```

## オブジェクト
Rにかぎりませんが，プログラミングでは
同じ数値を何度も扱うことがあります。
このような場合，Rではオブジェクトと呼ばれる
ものを作って情報を保存します。
オブジェクトに情報を保存することを「格納する」と言います。
Rでは，`<-`という記号を使ってオブジェクトに情報を格納します。
なお，存在しないオブジェクトを入力すると，エラーが返ります[^1]。

[^1]: プログラミングでは何らかの入力に対して，
  結果が「返ってくる（return）」という表現をよく使います。


```{r}
#| error: true
a <- 40 # a（というオブジェクト）に40を格納
a + 10 # a + 10を計算
b # bは存在しないので，エラー（Error: object 'b' not found）が返ります。
b <- 10 # bに10を格納
b # 今度はエラーは出ません。
```

オブジェクトには，数値以外に文字を格納することもできます。
たとえば文字は，ダブルクオーテーション（\"）でくくって，\"moji\"と表現します。
ダブルクオーテーション無しにmojiと入力すると，それはmojiというオブジェクトを意味します。

```{r}
#| error: true
"moji" # 文字です。
moji # mojiというオブジェクトです。存在しないのでエラーが返ります。
moji <- "moji" # mojiというオブジェクトに，"moji"という文字を格納しています。
moji # "moji"と表示されます。
```

## ベクトルとリスト
続いて，ベクトルとリストという考え方を学びます。
これは複数の数値や文字をまとめて扱う方法で，Rを使った分析では頻出します。

最初にベクトルについて説明します。
ベクトルは，`c( )`という記法で表現します。
たとえば，ある学級（仮にAクラスとします）の5人の児童の成績が，
40点・40点・60点・80点・80点だったとしましょう。
このときAクラスの成績をAというオブジェクトにまとめて扱うには，
ベクトルを使って次のように書きます。

```{r}
A <- c(40, 40, 60, 80, 80) # ベクトルを作成し，Aに格納。
A # Aの中身が表示されます。
```
ベクトルには，数値だけでなく文字も格納できます。
ただし数値と文字を混ぜると，すべての要素が文字に変換されてしまうので注意しましょう。

```{r}
B <- c("a", "b", "c") # 文字"a", "b", "c"を要素とするベクトルを作成し，Bに格納
B # Bを表示
C <- c(1, "a", "b") # 文字と数値を混ぜたベクトル
C # 数値1が，文字"1"になっています
```

リストは，文字と数値のように種類の違うものを格納するときに使います。
リストは，`list( )`という記法で表現します。
リストには数値や文字だけでなく，ベクトルやリストを格納することもできます。
Rでは，複雑な計算結果をリストに格納することもあります。

```{r}
L1 <- list(1, "a", 2) # 数値と文字が混ざったリスト
L1
L2 <- list(c(1, 2, 3), "a", 1) # ベクトルと文字と数値を格納したリスト
L2
```

## 規則的なベクトルの生成
Rを使っていると，規則的なベクトルが欲しくなるときがあります。
たとえば，
「1から10まで1ずつ増えるベクトル」
「10から30まで5ずつ増える（あるいは減る）ベクトル」
「1から3までを3回繰り返すベクトル」
などです。
Rでは，こうした規則的なベクトルを生成することができます。

```{r}
1:10 # 1から10まで1ずつ増えるベクトル
seq(10, 30, 5) # 10から30まで5ずつ増えるベクトル
seq(30, 10, -5) # 30から10まで5ずつ減るベクトル
rep(1:3, 3) # 1から3までを3回繰り返すベクトル
```


## ベクトルやリストの要素にアクセスする

作成したベクトルやリストの中身（要素と言います）に
アクセスしたいときは，\[ \]や，\[\[ \]\]といった記号を使います。

```{r}
x <- 1:10
x[3] # xの3番目の要素
x[-3] # xの3番目の要素を除いた要素
x[2:4] # xの2〜4番目の要素
x[seq(1, 5, 2)] # xの1,3,5番目の要素

y <- list(1:5, 6:10, 11:15)
y[[2]] # yの2番目の要素
y[[2]][3:4] # yの2番目の要素の中の3番目と4番目の要素
```

## 条件を付けて要素にアクセスする

「ベクトル内の6という要素」「ベクトル内の4以上の要素」といった
条件を付けることも可能です。
Rでは，`z == 3`とすると，zの要素についてそれぞれが3と一致するかどうか判定してくれます。
一致する場合は`TRUE`，一致しない場合は`FALSE`が返ってきます。
また，`z > 4`とすると，それぞれzの要素についてそれぞれが4より上かどうか判定してくれます。
`==`や`>`以外にも，`<`（より下）や`<=`（以下），`>=`（以上）といった書き方もできます。


```{r}
z <- 1:5
z == 3 # 要素が3と一致するかどうか
z < 4 # 要素が4より下かどうか
z > 4 # 要素が4より上かどうか
z <= 4 # 要素が4以下かどうか
```

さらに`z[z <= 2]`とすると，zの要素のうち2以下のものを抽出してくれます。
ここで，`z[z <= 2] <- 0`とすれば，zの要素のうち2以下のものがすべて0に置き換わります。

```{r}
z[z <= 2]
z[z <= 2] <- 0
z
```

その他，「ベクトル内の2と4は0にする」といった操作も可能です。
`w %in% c(2, 4)`と書くと，wの要素のそれぞれが2または4と一致するかどうか判定してくれます。
そのため，`w[w %in% c(2, 4)] <- 0`と書くことで，2か4の要素を0に変換することができます。

```{r}
w <- c(3, 1, 4, 5, 1, 5, 5, 2, 4, 5, 2)
w %in% c(2, 4)
w[w %in% c(2, 4)] <- 0
w
```

Rの基本操作は，これで終わりです。
なぜこんな機能が必要なのか，よくわからないという人も多いでしょう。
今はそれで構いません。
Rを使っていくうちに，ベクトルやリストの便利さがわかるようになってきます。
続いて，これらの機能を使い，標本調査の基礎知識を学びましょう。
